class HokifyTest is subclass of MyTestCase
types
values
-- TODO Define values here
instance variables
	employee1 : Employee := new Employee("Sara");
	employee2 : Employee := new Employee("Rita");
	
	employer1: Employer := new Employer("Ana");
	employer2: Employer := new Employer("Luis");
	
	job1: Job := new Job("Programador HTML", {"HTML"}, {"Programação","Web"},"Porto", <FullTime>, "Vaga para programador em HTML");
	job2: Job := new Job("Programador Versátil", {"Java","C++"}, {"Programação"},"Porto", <PartTime>, "Vaga para programador em multiplas linguagens");
	
	--Instance of the application
  public static hokify: Hokify := new Hokify();
	
operations
  --Runs all tests
	public static main: () ==> ()
	main() == (
		dcl test : HokifyTest := new HokifyTest();
		
		IO`print("Test Create User => ");
		test.testCreateUser();
		IO`println("Passed");
		
		IO`print("Test Add Interest => ");
		test.testAddInterest();
		IO`println("Passed");
		
		IO`print("Test Add Skills => ");
		test.testAddSkills();
		IO`println("Passed");
		
		IO`print("Test Add Location => ");
		test.testAddLocation();
		IO`println("Passed");
		
		IO`print("Test Add CV => ");
		test.testAddCV();
		IO`println("Passed");
		
		IO`print("Test Add Job => ");
		test.testAddJob();
		IO`println("Passed");
		
		IO`print("Test Add Job Skill => ");
		test.testAddJobSkill();
		IO`println("Passed");
		
		IO`print("Test Add Job Area => ");
		test.testAddJobArea();
		IO`println("Passed");
		
		IO`print("Test Change Job Location => ");
		test.testChangeJobLocation();
		IO`println("Passed");
		
		IO`print("Test Change Job Type => ");
		test.testChangeJobType();
		IO`println("Passed");
		
		IO`print("Test Change Job Description => ");
		test.testChangeJobDescription();
		IO`println("Passed");
	);
	
	--Test Create Users
	private testCreateUser: () ==> ()
	testCreateUser() == (
		
		hokify.createUser(employee1);
		hokify.createUser(employee2);
		hokify.createUser(employer1);
		hokify.createUser(employer2);
		
		--Tests if all users were created
		assertEqual(4,card hokify.users);
		assertEqual({employee1, employee2,employer1,employer2}, hokify.users);
		
	);
	
	--Test Add Interest 
	private testAddInterest: () ==> ()
	testAddInterest() == (
		dcl user1: Employee := hokify.getUserByName("Sara");
		dcl user2: Employee := hokify.getUserByName("Rita");
		
		user1.AddInterest("Programação");
		user1.AddInterest("Web");
		user2.AddInterest("Programação");
		user2.AddInterest("Web");
		user2.AddInterest("Design");
		
		assertEqual(2, card user1.Interests);
		assertEqual(3, card user2.Interests);
	);
	
	--Test Add Skill
	private testAddSkills: () ==> ()
	testAddSkills() == (
		dcl user1: Employee := hokify.getUserByName("Sara");
		dcl user2: Employee := hokify.getUserByName("Rita");
		
		user1.AddSkill("Java");
		user1.AddSkill("C++");
		user2.AddSkill("HTML");
		
		assertEqual(2, card user1.Skills);
		assertEqual(1, card user2.Skills);
	);
	
	--Test Add Location
	private testAddLocation: () ==> ()
	testAddLocation() == (
		dcl user1: Employee := hokify.getUserByName("Sara");
		dcl user2: Employee := hokify.getUserByName("Rita");
		
		user1.AddLocation("Porto");
		user2.AddLocation("Lisboa");
		
		assertTrue(user1.Location <> user2.Location);
		assertEqual("Porto", user1.Location);
		assertEqual("Lisboa", user2.Location);
		
		user2.AddLocation("Porto");
		assertEqual("Porto",user2.Location);
	);
	
	--Test Add CV
	private testAddCV: () ==> ()
	testAddCV() == (
		dcl user1: Employee := hokify.getUserByName("Sara");
		dcl user2: Employee := hokify.getUserByName("Rita");
		
		user1.CreateCV("Nome: Sara Santos Morada: Rua Testes"); 
		user2.CreateCV("Nome: Rita Torres Morada: Rua Teste Emprego: ....");
		
		assertTrue(user1.CV <> "");
		assertTrue(user2.CV <> "");
		assertTrue(user1.CV <> user2.CV);
	);
	
	--Test Add job
	private testAddJob: () ==> ()
	testAddJob() == (
		dcl user1: Employer := hokify.getUserByName("Ana");
		dcl user2: Employer := hokify.getUserByName("Luis");
		
		hokify.addJob(user1,job1);
		hokify.addJob(user2, job2);
		
		assertEqual(2, card hokify.jobs);
		assertEqual({job1,job2}, hokify.jobs);
		assertEqual(1, card user1.jobs);
		assertEqual(1, card user1.jobs);
	);
	
	--Test Add Job Skill
	private testAddJobSkill: () ==> ()
	testAddJobSkill() == (
		job1.addSkill("CSS");
		job2.addSkill("VDM++");
		
		assertEqual({"CSS","HTML"},job1.getSkills());
		assertEqual({"VDM++","Java","C++"},job2.getSkills());
	);
	
	--Test Add Job Area
	private testAddJobArea: () ==> ()
	testAddJobArea() == (
		job1.addArea("Engenharia");
		job2.addArea("Engenharia");
		
		assertEqual({"Engenharia","Programação","Web"}, job1.getAreas());
		assertEqual({"Engenharia","Programação"}, job2.getAreas());
	);
	
	--Test Change Job Location
	private testChangeJobLocation: () ==> ()
	testChangeJobLocation() == (
		job1.ChangeLocation("Maia");
		job2.ChangeLocation("Lisboa");
		
		assertEqual("Maia", job1.getLocation());
		assertEqual("Lisboa", job2.getLocation());
	); 
	
	--Test Change Job Type
	private testChangeJobType: () ==> ()
	testChangeJobType() == (
		job1.ChangeType(<PartTime>);
		job2.ChangeType(<FullTime>);
		
		assertEqual(<PartTime>, job1.getType());
		assertEqual(<FullTime>, job2.getType());
	);
	
	--Test Change Job Description
	private testChangeJobDescription: () ==> ()
	testChangeJobDescription() == (
		job1.ChangeDescription("Vaga para programador em HTML e CSS");
		job2.ChangeDescription("Vaga para programador em multiplas linguagens a tempo inteiro");
		
		assertEqual("Vaga para programador em HTML e CSS", job1.getDescription());
		assertEqual("Vaga para programador em multiplas linguagens a tempo inteiro", job2.getDescription());
	);
	
	
	/*
	 TESTING EXCEPTIONS
	*/
	
	--Test fail add interest : interest is ""
	public testFailAddInterest: () ==> ()
	testFailAddInterest() == (
		dcl user1: Employee := new Employee("Test");
		
		user1.AddInterest("");
	);
	
	--Test add a repeated interest
	public testAddRepeatedInterest: () ==> ()
	testAddRepeatedInterest() == (
		dcl user1: Employee := new Employee("Test");
		
		user1.AddInterest("I1");
		user1.AddInterest("I1");
	);
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end HokifyTest