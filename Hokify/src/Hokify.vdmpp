class Hokify
instance variables
  public users: set of (User) := {};
  public jobs: set of (Job) := {};
  public applications: set of (Application) := {};

operations
  --Creates a new instance of Hokify
	public Hokify: () ==> Hokify
	Hokify() == return self
	post users = {} and jobs = {} and applications = {};
	
	--Adds a new User
	public createUser: User ==> ()
	createUser(user) == users := users union {user}
	pre user not in set users
	post users = users~ union {user};
	
	--Gets User by Name
	public getUserByName: seq of char ==> User 
	getUserByName(name) == (
		dcl u : User;
		for all user in set users do
			if user.Name = name
			then return user;
			
		return u;
	);
	
	--Adds a new Job
	public addJob: Employer * Job ==> ()
	addJob(user, job) == (
	 user.addJob(job);
	 jobs := jobs union {job};
	)
	pre user in set users and job not in set jobs
	post jobs = jobs~ union {job};
	
	--Delete Job
	public deleteJob: Employer * Job ==> ()
	deleteJob(user, job) == (
		deleteJobApplications(job);
		user.deleteJob(job);
		jobs := jobs \ {job}; 
	)
	pre user in set users and job in set jobs
	post jobs = jobs~ \ {job};
	
	--Delete Employer
	public deleteUser: Employer ==> ()
	deleteUser(user) == (
		for all job in set user.jobs
		do (
		deleteJobApplications(job);
		jobs := jobs \ {job});
		
		users := users \ {user};
	);
	
	--Delete Employee
	public deleteUser: Employee ==> ()
	deleteUser(user) == (
	  deleteUserApplications(user);		
		users := users \ {user};		
	);
	
		--Apply for job
	public apply: User * Job ==> () 
	apply(user,job) == (
		dcl application: Application := new Application(user,job);
		if application not in set applications
		then applications := applications union {application};
	)
	pre is_Employee(user) and user in set users and job in set jobs;
	
	--Delete all jobs applications
	public deleteJobApplications: Job ==> ()
	deleteJobApplications(job) == (
		for all application in set applications
		do 
		if application.getJob() = job 
		then applications := applications \ {application};
	
	);
	
	--Delete all user applications
	public deleteUserApplications: Employee ==> ()
	deleteUserApplications(user) == (
		for all application in set applications
		do
		if application.getUser() = user
		then applications := applications \ {application};
	);
	
	--Get job by id
	public getJobById: int ==> Job
	getJobById(id) == (
		dcl j: Job;
		for all job in set jobs
		do
		if job.id = id
		then j:= job;
		
		return j;
	);
	
	--Get Employees
	public getEmployees: () ==> set of Employee
	getEmployees() == (
		dcl employees: set of Employee := {};
		
		for all user in set users
		do
		if is_Employee(user)
		then employees := employees union {user};
		
		return employees;
	);
	
	--Get Employers
	public getEmployers: () ==> set of Employer
	getEmployers() == (
		dcl employers: set of Employer := {};
		
		for all user in set users
		do
		if is_Employer(user)
		then employers := employers union {user};
		
		return employers;
	);
	
	--Get Employee applications
	public getEmployeeApplications: User ==> set of Application
	getEmployeeApplications(user) == (
		dcl apps: set of Application := {};
		
		for all application in set applications
		do
		if application.getUser() = user
		then apps := apps union {application};
		
		return apps;
	)
	pre user in set users and is_Employee(user);
	
	--Search Job by Skills
	public searchJobBySkills: Employee ==> set of Job
	searchJobBySkills(user) == (
		dcl j: set of Job := {};
		
		for all job in set jobs
		do
		if job.getSkills() \ user.Skills = {}
		then j := j union {job};
		
		return j;
	)
	pre user in set users;
	
	--Search Job by Interests
	public searchJobByInterests: Employee ==> set of Job
	searchJobByInterests(user) == (
		dcl j: set of Job := {};
		
		for all job in set jobs
		do
		if job.getAreas() inter user.Interests <> {}
		then j := j union {job};
		
		return j;
	)
	pre user in set users;
	
	--Search Job By Location
	public searchJobByLocation: seq of char ==> set of Job
	searchJobByLocation(location) == (
		dcl j: set of Job := {};
		
		for all job in set jobs
		do
		if job.getLocation() = location
		then j := j union {job};
		
		return j;
	)
	pre location <> "";
	
	--Search Job By Name
	public searchJobByName: seq of char ==> set of Job
	searchJobByName(name) == (
		dcl j: set of Job := {};
		
		for all job in set jobs
		do
		if job.getName() = name
		then j := j union {job};
		
		return j;
	)
	pre name <> "";
	
end Hokify
